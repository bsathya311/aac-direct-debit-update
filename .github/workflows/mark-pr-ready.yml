name: PR Validation and Mark Ready

# Trigger the workflow when a PR targeting 'main' is opened, updated (synchronize), or reopened,
# or if manually triggered via the GitHub UI.
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
  workflow_dispatch:

jobs:
  check-adr:
    name: ‚úÖ Check ADR Files
    runs-on: ubuntu-latest
    steps:
      # Only proceed if the PR is from the 'develop' branch
      - name: Exit if PR is not from 'develop'
        if: github.head_ref != 'develop'
        run: |
          echo "Skipping ‚Äî not from develop branch"
          exit 0

      - name: Checkout repository
        uses: actions/checkout@v3

      # Validate that at least one ADR file exists in the 'adr/' directory
      - name: Check for ADR files
        run: |
          if ls adr/*.md 1> /dev/null 2>&1; then
            echo "ADR files found."
          else
            echo "‚ùå No ADR files found in the adr/ directory."
            exit 1
          fi

  check-control-yaml:
    name: ‚úÖ Validate Control YAML
    runs-on: ubuntu-latest
    steps:
      # Only proceed if the PR is from the 'develop' branch
      - name: Exit if PR is not from 'develop'
        if: github.head_ref != 'develop'
        run: |
          echo "Skipping ‚Äî not from develop branch"
          exit 0

      - name: Checkout repository
        uses: actions/checkout@v3

      # Install yq for parsing YAML
      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O yq
          chmod +x yq
          sudo mv yq /usr/local/bin/yq

      - name: Confirm yq installation
        run: yq --version

      # Find all control YAML files and print their titles
      - name: Print YAML control titles
        run: |
          CONTROL_FILES=$(find ./controls -name '*-control.yaml')

          if [ -z "$CONTROL_FILES" ]; then
            echo "‚ùå No control YAML files found under ./controls"
            exit 1
          fi

          printf "\n%-50s | %-50s\n" "Control File" "Title"
          printf -- '%.0s-' {1..105}; echo

          for FILE in $CONTROL_FILES; do
            TITLE=$(yq '.title' "$FILE")
            TITLE="${TITLE:-‚ùå No title found}"
            printf "%-50s | %-50s\n" "$FILE" "$TITLE"
          done

  # validate-policy:
  #   name: ‚úÖ Policy-Architecture Compliance
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Only proceed if the PR is from the 'develop' branch
  #     - name: Exit if PR is not from 'develop'
  #       if: github.head_ref != 'develop'
  #       run: |
  #         echo "Skipping ‚Äî not from develop branch"
  #         exit 0

  #     - name: Checkout repository
  #       uses: actions/checkout@v3

  #     # Set up Python for running the validation script
  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10'

  #     - name: Install dependencies
  #       run: pip install -r requirements.txt

  #     - name: Make script executable
  #       run: chmod +x scripts/validate_policy_architecture_compliance1.py

  #     # Run policy compliance check
  #     - name: Run validation script
  #       run: python ./scripts/validate_policy_architecture_compliance1.py

  #     # Always upload the generated report, even if the job fails
  #     - name: Upload report artifacts
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: policy-evaluation-report
  #         path: aac-direct-debit-update/compliance-reports/policy_evaluation_report_*.md

  mark-ready:
    name: üöÄ Mark PR as Ready for Review
    runs-on: ubuntu-latest
    #needs: [check-adr, check-control-yaml, validate-policy]
    needs: [check-adr, check-control-yaml]
    # Only mark the PR as ready if:
    # - it's currently a draft
    # - it's coming from the 'develop' branch
    if: github.event.pull_request.draft == true && github.head_ref == 'develop'

    steps:
      # Use GitHub API to mark the PR as ready (i.e., remove draft status)
      - name: Mark PR as Ready
        run: |
          echo "Marking PR #${{ github.event.pull_request.number }} as ready for review..."
          curl -s -X PATCH \
            -H "Authorization: token ${{ secrets.PAT_REPO_WRITE }}" \
            -H "Accept: application/vnd.github.shadow-cat-preview+json" \
            https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }} \
            -d '{"draft": false}'
